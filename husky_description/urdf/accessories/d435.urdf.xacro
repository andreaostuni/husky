<?xml version="1.0"?>


<robot name="sensor_d435"
  xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:macro name="intel_realsense_mount" params="prefix parent_link">

    <xacro:property name="M_PI" value="3.1415926535897931" />

    <xacro:property name="use_mesh" value="true" />

    <xacro:property name="use_nominal_extrinsics" value="true" />

    <!-- The following values are approximate, and the camera node
      publishing TF values with actual calibrated camera extrinsic values -->
    <xacro:property name="d435_cam_depth_to_infra1_offset" value="0.0"/>
    <xacro:property name="d435_cam_depth_to_infra2_offset" value="-0.050"/>
    <xacro:property name="d435_cam_depth_to_color_offset" value="0.015"/>

    <!-- The following values model the aluminum peripherial case for the
      D435 camera, with the camera joint represented by the actual
      peripherial camera tripod mount -->
    <xacro:property name="d435_cam_width" value="0.090"/>
    <xacro:property name="d435_cam_height" value="0.025"/>
    <xacro:property name="d435_cam_depth" value="0.02505"/>
    <xacro:property name="d435_cam_mount_from_center_offset" value="0.0149"/>
    <!-- glass cover is 0.1 mm inwards from front aluminium plate -->
    <xacro:property name="d435_glass_to_front" value="0.1e-3"/>
    <!-- see datasheet Revision 007, Fig. 4-4 page 65 -->
    <xacro:property name="d435_zero_depth_to_glass" value="4.2e-3"/>
    <!-- convenience precomputation to avoid clutter-->
    <xacro:property name="d435_mesh_x_offset" value="${d435_cam_mount_from_center_offset-d435_glass_to_front-d435_zero_depth_to_glass}"/>

    <!-- The following offset is relative the the physical D435 camera peripherial
      camera tripod mount -->
    <xacro:property name="d435_cam_depth_px" value="${d435_cam_mount_from_center_offset}"/>
    <xacro:property name="d435_cam_depth_py" value="0.0175"/>
    <xacro:property name="d435_cam_depth_pz" value="${d435_cam_height/2}"/>

    <material name="aluminum">
      <color rgba="0.5 0.5 0.5 1"/>
    </material>
    <material name="plastic">
      <color rgba="0.1 0.1 0.1 1"/>
    </material>

    <!-- camera body, with origin at bottom screw mount -->
    <joint name="${prefix}_joint" type="fixed">
      <parent link="${parent_link}"/>
      <child link="${prefix}_bottom_screw_frame" />
      <!-- <origin xyz="${realsense_xyz}" rpy="${realsense_rpy}"/> -->
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </joint>
    <link name="${prefix}_bottom_screw_frame"/>

    <joint name="${prefix}_link_joint" type="fixed">
      <origin xyz="${d435_mesh_x_offset} ${d435_cam_depth_py} ${d435_cam_depth_pz}" rpy="0 0 0"/>
      <parent link="${prefix}_bottom_screw_frame"/>
      <child link="${prefix}_link" />
    </joint>

    <link name="${prefix}_link">
      <visual>
        <xacro:if value="${use_mesh}">
          <!-- the mesh origin is at front plate in between the two infrared camera axes -->
          <origin xyz="${d435_zero_depth_to_glass + d435_glass_to_front} ${-d435_cam_depth_py} 0" rpy="${M_PI/2} 0 ${M_PI/2}"/>
          <geometry>
            <mesh filename="package://husky_description/meshes/accessories/d435.dae"/>
          </geometry>
        </xacro:if>
        <xacro:unless value="${use_mesh}">
          <origin xyz="0 ${-d435_cam_depth_py} 0" rpy="0 0 0"/>
          <geometry>
            <box size="${d435_cam_depth} ${d435_cam_width} ${d435_cam_height}"/>
          </geometry>
          <material name="aluminum"/>
        </xacro:unless>
      </visual>
      <collision>
        <origin xyz="0 ${-d435_cam_depth_py} 0" rpy="0 0 0"/>
        <geometry>
          <box size="${d435_cam_depth} ${d435_cam_width} ${d435_cam_height}"/>
        </geometry>
      </collision>
      <inertial>
        <!-- The following are not reliable values, and should not be used for modeling -->
        <mass value="0.072" />
        <origin xyz="0 0 0" />
        <inertia ixx="0.003881243" ixy="0.0" ixz="0.0" iyy="0.000498940" iyz="0.0" izz="0.003879257" />
      </inertial>
    </link>

    <!-- Use the nominal extrinsics between camera frames if the calibrated extrinsics aren't being published. e.g. running the device in simulation  -->
    <xacro:if value="${use_nominal_extrinsics}">
      <!-- camera depth joints and links -->
      <joint name="${prefix}_depth_joint" type="fixed">
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <parent link="${prefix}_link"/>
        <child link="${prefix}_depth_frame" />
      </joint>
      <link name="${prefix}_depth_frame"/>

      <joint name="${prefix}_depth_optical_joint" type="fixed">
        <origin xyz="0 0 0" rpy="${-M_PI/2} 0 ${-M_PI/2}" />
        <parent link="${prefix}_depth_frame" />
        <child link="${prefix}_depth_optical_frame" />
      </joint>
      <link name="${prefix}_depth_optical_frame"/>

      <!-- camera left IR joints and links -->
      <joint name="${prefix}_infra1_joint" type="fixed">
        <origin xyz="0 ${d435_cam_depth_to_infra1_offset} 0" rpy="0 0 0" />
        <parent link="${prefix}_link" />
        <child link="${prefix}_infra1_frame" />
      </joint>
      <link name="${prefix}_infra1_frame"/>

      <joint name="${prefix}_infra1_optical_joint" type="fixed">
        <origin xyz="0 0 0" rpy="${-M_PI/2} 0 ${-M_PI/2}" />
        <parent link="${prefix}_infra1_frame" />
        <child link="${prefix}_infra1_optical_frame" />
      </joint>
      <link name="${prefix}_infra1_optical_frame"/>

      <!-- camera right IR joints and links -->
      <joint name="${prefix}_infra2_joint" type="fixed">
        <origin xyz="0 ${d435_cam_depth_to_infra2_offset} 0" rpy="0 0 0" />
        <parent link="${prefix}_link" />
        <child link="${prefix}_infra2_frame" />
      </joint>
      <link name="${prefix}_infra2_frame"/>

      <joint name="${prefix}_infra2_optical_joint" type="fixed">
        <origin xyz="0 0 0" rpy="${-M_PI/2} 0 ${-M_PI/2}" />
        <parent link="${prefix}_infra2_frame" />
        <child link="${prefix}_infra2_optical_frame" />
      </joint>
      <link name="${prefix}_infra2_optical_frame"/>

      <!-- camera color joints and links -->
      <joint name="${prefix}_color_joint" type="fixed">
        <origin xyz="0 ${d435_cam_depth_to_color_offset} 0" rpy="0 0 0" />
        <parent link="${prefix}_link" />
        <child link="${prefix}_color_frame" />
      </joint>
      <link name="${prefix}_color_frame"/>

      <joint name="${prefix}_color_optical_joint" type="fixed">
        <origin xyz="0 0 0" rpy="${-M_PI/2} 0 ${-M_PI/2}" />
        <parent link="${prefix}_color_frame" />
        <child link="${prefix}_color_optical_frame" />
      </joint>
      <link name="${prefix}_color_optical_frame"/>
    </xacro:if>


    <!-- camera sensors plugin using gazebo -->
    <xacro:macro name="intel_realsense_gazebo" params="
      frame:=camera_color    topic:=camera_color
      h_fov:=0.97043444444   v_fov:=0.75394888888
      width:=640             height:=480
      update_rate:=30">

      <!-- CAMERA PLUGIN GAZEBO -->

      <gazebo reference="${frame}_frame">
        <sensor type="depth" name="${topic}">
          <always_on>1</always_on>
          <update_rate>${update_rate}</update_rate>

          <camera name="${topic}">
            <vertical_fov>${v_fov}</vertical_fov>
            <horizontal_fov>${h_fov}</horizontal_fov>
            <image>
              <format>R8G8B8</format>
              <width>${width}</width>
              <height>${height}</height>
            </image>
            <clip>
              <near>0.15</near>
              <far>50.0</far>
            </clip>
          </camera>
          <plugin name="camera_plugin" filename="libgazebo_ros_camera.so">
            <!-- Set camera name. If empty, defaults to sensor name (i.e. "sensor_name") -->
            <camera_name>${topic}</camera_name>

            <!-- Set TF frame name. If empty, defaults to link name (i.e. "link_name") -->
            <frame_name>${frame}_optical_frame</frame_name>

            <P_cx>324.857025146484</P_cx>
            <P_cy>251.617706298828</P_cy>
            <P_fx>606.520935058594</P_fx>
            <P_fy>605.694885253906</P_fy>
            <!-- <hack_baseline>0.05</hack_baseline> -->

          </plugin>
        </sensor>
      </gazebo>
    </xacro:macro>

    <xacro:macro name="intel_realsense_stereo" params="
      frame:=camera_infra1   topic:=camera_stereo
      h_fov:=1.39607888889   v_fov:=1.12307333333
      width:=640             height:=480
      update_rate:=30">

      <!-- MULTICAMERA PLUGIN GAZEBO -->
      <!-- <xacro:intel_realsense_gazebo
      frame="camera_infra1" topic="camera_stereo_gazebo"
      h_fov="${h_fov}"   v_fov="${v_fov}"
      width="${width}"             height="${height}"
      update_rate="30"/> -->
      <gazebo reference="${frame}_frame">
        <sensor type="multicamera" name="${topic}">
          <always_on>1</always_on>
          <update_rate>${update_rate}</update_rate>

          <camera name="left">


            <vertical_fov>${v_fov}</vertical_fov>
            <horizontal_fov>${h_fov}</horizontal_fov>
            <image>
              <format>L8</format>
              <width>${width}</width>
              <height>${height}</height>
            </image>
            <clip>
              <near>0.15</near>
              <far>50.0</far>
            </clip>
            <noise>
              <type>gaussian</type>
              <!-- Noise is sampled independently per pixel on each frame.
                  That pixel's noise value is added to each of its color
                  channels, which at that point lie in the range [0,1]. -->
              <mean>0.0</mean>
              <stddev>0.0001</stddev>
            </noise>
            <lens>
                <intrinsics>
                  <fx>381.184051513672</fx>
                  <fy>381.184051513672</fy>
                  <cx>320.354888916016</cx>
                  <cy>234.069793701172</cy>
                  <skew>0.0</skew>
                </intrinsics>
            </lens>
          </camera>

          <camera name="right">
            <pose>0 -0.05 0 0 0 0</pose>

            <vertical_fov>${v_fov}</vertical_fov>
            <horizontal_fov>${h_fov}</horizontal_fov>
            <image>
              <format>L8</format>
              <width>${width}</width>
              <height>${height}</height>
            </image>
            <clip>
              <near>0.15</near>
              <far>50.0</far>
            </clip>
            <noise>
              <type>gaussian</type>
              <!-- Noise is sampled independently per pixel on each frame.
                  That pixel's noise value is added to each of its color
                  channels, which at that point lie in the range [0,1]. -->
              <mean>0.0</mean>
              <stddev>0.0001</stddev>
            </noise>
            <lens>
              <intrinsics>
                <fx>381.184051513672</fx>
                <fy>381.184051513672</fy>
                <cx>320.354888916016</cx>
                <cy>234.069793701172</cy>
                <skew>0.0</skew>
              </intrinsics>
            </lens>
          </camera>
          <plugin name="stereo_camera_plugin" filename="libgazebo_ros_camera.so">
            <!-- Set camera name. If empty, defaults to sensor name (i.e. "sensor_name") -->
            <camera_name>${topic}</camera_name>
            <!-- Set TF frame name. If empty, defaults to link name (i.e. "link_name") -->
            <frame_name>{frame}_optical_frame</frame_name>
            <hack_baseline>0.05</hack_baseline>
            <P_fx>381.184051513672</P_fx>
            <P_fy>381.184051513672</P_fy>
            <P_cx>320.354888916016</P_cx>
            <P_cy>234.069793701172</P_cy>
          </plugin>
        </sensor>
      </gazebo>
    </xacro:macro>
    <xacro:if value="$(arg realsense_sgm_enabled)">
      <xacro:intel_realsense_stereo
        frame="${prefix}_infra1" topic="camera_stereo"/>
    </xacro:if>
    <xacro:if value="$(arg realsense_enabled)">
      <xacro:intel_realsense_gazebo
        frame="${prefix}_color" topic="camera_color"/>
    </xacro:if>
  </xacro:macro>
</robot>
